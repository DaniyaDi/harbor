---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "bnNnSXRZTU0yS0dYWVIweQ=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBeTVQa2ROTFlWaGpkcjI5akx1UzNVWGRHRnpTYUIxTGptU09pdm43YzhRTlZVK0luCkp3RE1WbFpYV0hLaGE4REQ3OVFpOHJrSXJ2VHlqR3Ivbk5kbTBmeURySWtjUHRJbGxPbHVmeU9LeWJzK1VEb04KSG92VW9FcEozWFNqTFZoSk1GOXQ1OEJzWlNDcHAxTFJnT1N1NmlPdG5CekxvL2hUTm1pN1RjMG9SRnowaERjMQpsaE9NWUd6UlUrZ2NiSHlBRVNzS2ZtZ0lNeW5acVF0cHowbUswTTFyRmwyaUN2aFVkYjh3R3JUczNyTk9sYjRUCmliZENEMk5aa0J1U3BwTGNyZzgrN3VWQnJnZGNHcmhVdEtDWW1IVjVjOUpEVlR2WE1uTHB4aS9zRmQxSlZ5OVgKNjlEaGRNU1N2UXJYVWJGOWFpdU1udHEzVWFjeVZDYTFObVlRbFFJREFRQUJBb0lCQUNmdHErTlY3MlNEb0FkbQp1M2RaR0xON3gxMkp6YVFlRjlIVGNYb1hlOUl4cXl5MnNLTXZ2dVE0THcyRC9qRWFMOVA4TVphVndDUkFtc243CnVvTFNwTElPNnV5T1ArSDZhYkNaVURqVGljY2pXSWQzdTFjQWFnVytURnFKSS9BaTNzZ0VENVJpNDErNlZrd2gKTEVJeG1EVUlKbWIySnVMVU04MzZJTEtUeUpBUHFiemR5a3I3ZHVaalhSeEs5UWZDckg3L1kvKzNVcmEzTHhpdQp0b1d1YmRyTVFaTWUwV2EvdmtQLzVzMzU0bEJ5RzRNL09sczN2QkFQVWplSzdWVjBBWFVzSnVaSmJOYU02bURUClFSMDBnbnVyZkdIMEFIRmlpZlRQSVlDSkZLUVdRMXFyUnBESE1sU2JRYlN0R3pyVnlHM2RRRERpMVhJbVdwWXcKTGxHQnMwa0NnWUVBNkdjeU9OU0xuQWtxQ1VpT3crMW0rdFdtb0tYNzJTREFJdkxLRUsrR0RHSHFQQ2RDZEJrcgpIS3Vvb2txd2hwVmg4akhpQklwc0ZyWU8xREJnVFgwbjluTkEwTnIvS0xibkFTNmFsNW9xNlRmdzlRMThKZERMCjNYOXMwbVZGcXRmc0ZrZjNrL2ZoL2lPOVpIcUYwK3BQVkNUc1RQWm13TExmSUFCN1FrUjN3SDhDZ1lFQTREOXgKbGdPVHhYSGRCVkFPeXpLN2FsbzYzU01LbGthWVIvRWhkV1djSmk1UlQ3QTBKTXEwSkxjTGkxaHRqTlpRaG5jcAowWWNVTnk3aHJoQ2tiZEtZMk9jQitKckRhOXNyVkkzcndETjdUcjI1bkxWYTk0ZWs3Tmk1RndiWDZLSG5BM3RFCjl3NWk1WGlyU0R0TE9CQVhhVW1ZV2dZb1BIZEZyOW4zd2NkWnBPc0NnWUJlTExzNE5rRGdtUUlVd3ZjL1ErdHcKQjdXKzhhUHRwNHpVWEtndlBNRklNVUZXNE4zWDUvOEZYalkybGFlVTBlSGY0QURqc0NmK3lBV1lUSVlwd0dhNgpRcGZvU21ZTlhKaWRiUUl1SHNYMnZibUJ3OVlrQ01rajE2Z0VWZzkySEl0SnVCNEdNdk84SlVWdyt3bFNCMmZnCkJCcFJVYVB2d0V3VVRyMmo2OVRQQndLQmdDSFJEM1Q2NXg3Z1U5OUlPbUxrTEtVV0pFaFN6M2JvQUhEZzZSWEcKRSswaUVQcitiRzZiN3R5V2lmUWlpcXF4YXdWTUZROVcybktUN0U2T2plMU4wK1RwdVQ5ZlAxY1Zmd3hLTnFJTwpZV3IzYTNVNVdCVjU3Q0lYY0pvTFd5WG12R3FtL1Rod2YvTnc1Z3VIZllsZnk5Z0IxQ3JIUU93VlpIbm5XZGhzCkVwV3ZBb0dBRm56RmNYZnBkdVlGWWYyd1c2cXpaN1pIbitCM25qa20rbU9vdVlnbkFOQXYzcys0MlVjQmtVY3IKUlZsYmptWC96VmNWdENQUmRKakRVRmpLTnRVT2RWZXpQUkhFdmdzVHpqNXEzeFNld2FhWmNGcm1tV3piTGp5SgpPRXozeDRzcWhKTVF5THQzSzVuaXppMFNhVVpvTWZQYmkzenhScVh5dmF6b0xUQjUyRkU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIekNDQWdlZ0F3SUJBZ0lRRnhxYk9VWStWM2RqY2ZDa0pqQ1ZBekFOQmdrcWhraUc5dzBCQVFzRkFEQWEKTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3SGhjTk1qUXdNekE1TVRrd05ESTBXaGNOTWpVdwpNekE1TVRrd05ESTBXakFhTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURMaytSMDB0aFdHTjJ2YjJNdTVMZFJkMFlYTkpvSFV1T1oKSTZLK2Z0enhBMVZUNGljbkFNeFdWbGRZY3FGcndNUHYxQ0x5dVFpdTlQS01hditjMTJiUi9JT3NpUncrMGlXVQo2VzUvSTRySnV6NVFPZzBlaTlTZ1NrbmRkS010V0Vrd1gyM253R3hsSUttblV0R0E1SzdxSTYyY0hNdWorRk0yCmFMdE56U2hFWFBTRU56V1dFNHhnYk5GVDZCeHNmSUFSS3dwK2FBZ3pLZG1wQzJuUFNZclF6V3NXWGFJSytGUjEKdnpBYXRPemVzMDZWdmhPSnQwSVBZMW1RRzVLbWt0eXVEejd1NVVHdUIxd2F1RlMwb0ppWWRYbHowa05WTzljeQpjdW5HTCt3VjNVbFhMMWZyME9GMHhKSzlDdGRSc1gxcUs0eWUycmRScHpKVUpyVTJaaENWQWdNQkFBR2pZVEJmCk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKRHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVQzNhSGZLOVBtWDdwVjM3a3hMZzduQmJIeFZzdwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRUNGNHk4djR6MDBmemREc1h5MjFuSitPNVlJL3kyZ0tHd3hrUW9MCnUxVEJqNHZVR3RDUUREY01ROStaL0RQL1JBMmtKSHdFNGM5NFhkTFRZM2NabnZabU5LekxUMzNQd3BmRnROTy8KRkVsaWMvSExOREthQzR3V2p5MG1hVzQ1ZUc5SnFMbnJ2VFFWbzlvNVhtUWdVMFErUHd1M1JuOXIxVU5RbzVodQpkajJOajYxeUNiMlFqeU9lSGFvM2Evc2tFWnZFU2ZLZnFuMldPOUszQjEvM0o3bkRhWnFXNzYwTXFTNzZ1azNLCmcybUZlWktFTjhJM0t3cldjR0p0SkhBeld6T1QvTDU4dWp6RWJqaDZNd001QzRGWEVkbFYvcGk0ODg3VHc5RHEKcTVCeklDOEszcit2MFNmL3N5VmhyMzZTdldaQmpMNURMRmpjdnZyZVN5cnRZZEk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "RHFvRVFUdko0RHVKUGJoWExsRVNMSmt1azZQaTVBMmw="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRVzh6OEJwVUsza0ZyWHlLazYvTytBVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalF3TXpBNU1Ua3dOREl6V2hjTk1qVXdNekE1TVRrdwpOREl6V2pBZE1Sc3dHUVlEVlFRREV4SmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzZTS21XSFNpenVUM0tXMzdCckNFNUIwOVlnWmZCSzFCcnZXMGoKTHZQUTFpY29lODZLTjd3SjlhWGU5b0M0ZEFSTlhoOW9ad3lvcmFwTXBSVnhhNjhaRW5kYWFoMm9KUmJQaWgwQwpOYTFBcXU3RnBKbFIzeVp2N1BMYytLMjhMOUZML3ZzeFhTZmFnWituNDBORUJlOHJaajdKcHQweDF0a1h2Q1dKCjZHK2VrTE5DL1lLc1RqR3d0V1YyMnBKejk2WU1vejBvZ3ZRRmlCK1d0YlFmdERUZ1dXbUtQWDY1c0ptUjU4VzAKVG5qRXZFTDlPWUd0OVVMTnFrZWp3dUlTN01PVUhodE1DRUdHY2JkbGpSdUovUno4cHFwQ0ozMGw1azh6Y1p3QwpjTHlNYmlSYVZSRkphcFBDNllXZXcvVWNhQkdaUzEwMFk5QTdPNkNHSkJnUjZLbnZBZ01CQUFHamZ6QjlNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWUQKVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCVDFZMzdQV0ZCNmwwTzhMMGJ5Q1lEOTBmTjhRREFkQmdOVgpIUkVFRmpBVWdoSmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSnFHCkwwM2JVMEJ3WkdxMWtCZWdjeFhNTWZLZENWVHd6bXQ1MmZXVTdIZFBGVGRVR2lRWm5RUnJCTG1CRnFuZmRDTWUKZSs5TDl6V0ZmdExDT0lRcjMvM0kwc29MSkZGcVd2S3JjM2twZ3J1U09aTjh0RXNWMWhsNVJyRzdEYmVHeGV3ZgpaMUQyZThEdG5LeXBqZGp2aEdrSFlQNFdwSFg2RkV3MmIwNDNld3RyQXFleEpDTEFkMVhVNlNTTXNqMCtWTFJ3CnhmS0xhc0JSQmMwWlYwWUsxZ0JIUkFqQmJMaVZLVkVmWVV1VFJoNXpiRE9yOXJHRnE2K0VmK3lGTkEyTTJBN1QKd1BqRDNxRWpkWTRoMDZGWUk2dnMzTDRUQjY1T1JHcC9HbDNZYjZZZ0lweWUvU0UwUFUvc21lZm5ITzBycFREVQpIVVgvN1Q1bE5GSkxsdHFxV1lrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWtpcGxoMG9zN2s5eWx0K3dhd2hPUWRQV0lHWHdTdFFhNzF0SXk3ejBOWW5LSHZPCmlqZThDZldsM3ZhQXVIUUVUVjRmYUdjTXFLMnFUS1VWY1d1dkdSSjNXbW9kcUNVV3o0b2RBald0UUtydXhhU1oKVWQ4bWIrenkzUGl0dkMvUlMvNzdNVjBuMm9HZnArTkRSQVh2SzJZK3lhYmRNZGJaRjd3bGllaHZucEN6UXYyQwpyRTR4c0xWbGR0cVNjL2VtREtNOUtJTDBCWWdmbHJXMEg3UTA0RmxwaWoxK3ViQ1prZWZGdEU1NHhMeEMvVG1CCnJmVkN6YXBIbzhMaUV1ekRsQjRiVEFoQmhuRzNaWTBiaWYwYy9LYXFRaWQ5SmVaUE0zR2NBbkM4akc0a1dsVVIKU1dxVHd1bUZuc1AxSEdnUm1VdGROR1BRT3p1Z2hpUVlFZWlwN3dJREFRQUJBb0lCQUM3TTdKWkRNeU9jQ1hNYQpjNGtTeHJIK0xTZ09QdU1RRDc5UnN1YWcrQzVpYnlvVG1MdE83MVlOT2lQL0NDM1BML21FQ1I0QXJjUi9CUWNHCmZwR2xQVE51V1VBRTR2aUlnT2VaU2xwd3c5czRWbzZmSU1uWjUxMDlTWExNbzFGaExoTUt0MjhhZVZYRE5TcEgKeFhHRWtDYjJKQllqYnZVRGhqMFpUdEVMN1djSGc5UDkwNzZNQW5HZEMyVkpGSDZ0S0wyWXNBQ2dkWmx2SXlxUQpBcENuZGpXSFVMc1pERmhVR09oZ0dRUXc5YlJhVm9jQTdjelNiRDJVb2NxUzNjakJ6OFZKbUIrUTJCRGFmOXE4CnAxUjNENWI1dS9xTEZrUGxGN1ZqN1kyZTZySVpyRWVES2NnNFBvQUNEOUZDMkx6THg5YkYyd202MFQ1aUR1ajcKRVdybHJPRUNnWUVBMXZqYnEvenhEU0RqeWc5NVR3a2N0eEh6a0NqbExtYlFtd3pDQTFpNDhJek9PcDVvOXByZApYVEc2eGVwNmRmcndBMVNNdHFrc04vbmdZTC95TDJPRHZPd1ZZMk54KzNEckZUcmNXRG9WVWFMUHh1OWZ6K3JoClhlSW9zc2RSQjVvSldRQjZFWjRxV3lvUi9va3UvcDdJSnBCb0ZWRHFzZEI2STNFdmtVODhNbjhDZ1lFQTNkWW0KQW5aMkpQVFQwSkxFY3NQbm5VTVdWSzRqREFvRXhGNWVKWWlPS3ZPeVpFS3Jna1M1Z0FDeDBoNTQrbXNqNFRyUwpBTFhVRkp0bHlCM3dnUC9NNWlUSlhuRXRpQjhvTHQrcHIvL2ZoWm40YlE5WXdtQlVTbnFDTVBZbElOSE1rbjBVCnBZZk0rNUVUSEY5WThuUXAwZlpuNU02SU0yOWFkazFoTTZBSDhKRUNnWUI1eWdsaUdlNVMrc1F5c0t1UVhHQTUKVTJGQzFmaHBYblJtczBhamNMdHVCTWU5ckF0WlV3bUFoL0VCdWNMaFhtWmw3SnUvekg0eHhFNGJZZ09LVjMzRwpKWlpFZFkyWTN6TkFGdFhJNGpjN3hkcWpJUENPTWNxMlRxK3lBWHZscTU0S0gxd0k2U3VqOUdTM2FPOEg3OXNECkJpTUJtSk11WkNjZU56eTB2VWdrYndLQmdFWFdYVEQ1U2tob0t5YkdqY0h6bXI4UGw4QWc4amVnRDlBaVJWRmIKcENZeGdqKytIWEJ0WWxqQjN6bGZEb2NIbzh3TVVJQ1l2YU9mS0hQUHVSOWphSVlybnBsMDEvaTZsbFByWmVoYQpqV3ZxQlNPUWFVa0lPb0VZQUZTWnFTYWo1ZHRZTlYvSFdPajV5eUpyZ2YwU1JQZ3NzcGg5ekxNa296NExMa2FxCll0V0JBb0dCQU03VExzVjd6Mm5uVUdObUNvQm1CZmR4NlJVNjFCR3ZtOG9PbmdzaHhreDNUd3JsN1B2RldsUE0KOWlEMFJMakl3WTlBb3pTQ0c3MG5QV3dURnZ3MzRRVTd3dm5sSzJDYk1TazhzNFdnSGNxQVBHNENNRC8rTi9YZApZMVE3SjZhT1hKT2g0dm01THQweTcxT2lWVnNrRmp6eHZHbE9VQ3BVTkowck5iZm1Qc2drCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRitkaXJ4Y2taTXF0VlNCb0VRM0xXREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalF3TXpBNU1Ua3dOREl6V2hjTk1qVXdNekE1TVRrdwpOREl6V2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzduK3FvVjVPZGVDTUlqdXllNFMwRlJwbzBxMXhKVXZzcGJVTFRzQURJenpiQ05qUVMKcGlZSUduYnE3RXBCNWVweGNDZm1vcllUVGV1N2V5RVVQRXJtSHM4NHhjOEcvQ2EyZ1Q3bXpoUWlOZ2FjcnpBRQowWFVaTURrY2tmbitBVUR3RW5YSXE0WTc0WG9LMHdZaWNFOEJVc2hLQmMxeUk0bzRhc2RjNGFyVHV3KzBiRkxDCjlJcUl4TG5hWDFVeHNzOVQ4N0hXb1phTU5SS095bTI2S3RwSk5sQSt1dkNEY0pidWNvYWZqbTlKVnlWWnkvL00KTXkwTUNxNldvVXRBWkphT2VhczEzeU1GNmM3c0V1VUo3R3VNRGRxR29uakFndk12WEZnWmFWaklOSU1laUwyRQpQSG9TZmRHNmRwM2s4Zm4vd1Q1YmZaU0Z4ajJ2NVNkZERTVmZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVU5V04rejFoUWVwZER2QzlHOGdtQS9kSHpmRUF3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFDSE92YnFlSTNPdHFUZEs4NTIyU2hPdzZKOXlwZlF1dHVOUGpDVHZpanBxbml1N2ZoUVJ0RzUwCnQwUkdScXlxdFAzVW1mZEo1a1BiekNDVzZVZHdoaDVVTE1VMDhlV2hoMml5NlhLVGZ4T3Erb3dNWHFLcTBKeXcKTjVMN0lNQlBuYW5FTVpRbFVJNWNteWNzNXcvKzVxdC9TY3RIVzdzWVZaOXQ4MEdQSllOSHo0MGVVVkxxdkg4Vgp1YkJMV2N4RU5oekJmeDB4dDN4Mmt2QklGNEVCU1VERVp6dUIzYkE3aU5jYnZ3TUR5bWJyNC9VQnpJZ0tZbW56CncyNWVuYmM1clJaVk5tbFNKU29wU2ljWkljQkFYenBiNWVLMjRVZUNuNnNvSVE5VjhXOUxvRlFkVW9vL0w1WVcKQjlVVmNOaFZQR2tWR2FESmE0Ui9GOEExblRqbG9Kaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "TUFpMWpSZjJpa0FHVUdJWA=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "S1JPQTBYM2VsQ0tLbThRMg=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry-htpasswd"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJGZIaUFjWVl6eFhjYWovZko5TlNwWi5scXRHZ091ekdEdW03L05BWUJPZTFLT1dSOVVNbUZP"
---
# Source: harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registryctl"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
  gitHubToken: ""
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://harbor-core:80"
  JOBSERVICE_URL: "http://harbor-jobservice"
  REGISTRY_URL: "http://harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://harbor-redis:6379/2?idle_timeout_seconds=30"  
  PORTAL_URL: "http://harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  QUOTA_UPDATE_PROVIDER: "db"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice-env"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://harbor-core:80"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  REGISTRY_URL: "http://harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registryctl"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-trivy"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: c8548a620a464d3c00e1a2e878d013f2f9f974c21f7f8a290777e45f948f2d72
        checksum/secret: 0ce5f49e8cb0821196178dd696dc8f243a569b60a39c05226571a01eed694b04
        checksum/secret-jobservice: ed8aed9ef184dddef07fe59890261f6e03d3405922b788e61e8a1fafc640f75f
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:v2.10.0
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-core"
        - secretRef:
            name: "harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-jobservice
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-core
      - name: ca-download
        secret:
          secretName: "harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: cc0e1292cee3c8425c958aeee30046a701a7b3e32ce7b5d3751cceebea93e2f3
        checksum/configmap-env: 52de7676d9ac66bda6ec9e57e3274d89d9b22ddea971c927ebb81964b680f5df
        checksum/secret: dd1923483fa44c38faae8225661518a31f42c1a977951b02aa4d63bb9872ed12
        checksum/secret-core: 851be3f136eca6b21df6b7b38e2b51abd4460c17c9ff322ea52f917c635246e6
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "harbor-jobservice-env"
        - secretRef:
            name: "harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-jobservice
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: portal
      annotations:
        checksum/configmap: 81e3c496ae5701420a27d38fd5d8a908c1ba48909fbc7d774e6325c925e5b224
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 1dd422c1f80f9b0e00e1a2297e956c1da3fb1d6bc24892179accf38bc1e3be96
        checksum/secret: 52c0be8a15b142b19e72c17b9dca177db2269f8bb1e3ee3a653e5fa10bc3f660
        checksum/secret-jobservice: 8ba3275c957febf24c05e9ff0ec21cfe22dcf5f5522d2d9f1d7ad7737ef5ca90
        checksum/secret-core: bf34de608ef403406be2079dd621742cd8ece38266232243307dfb13ee448ffb
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-registryctl"
        - secretRef:
            name: "harbor-registry"
        - secretRef:
            name: "harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: harbor-registry-htpasswd
          
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 55b1e7be0855a53d12362dc11834f575bd16ba09cdd84b0551bda85635e15ac1
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # as we change the data directory to a sub folder to support psp, the init container here
      # is used to migrate the existing data. See https://github.com/goharbor/harbor-helm/issues/756
      # for more detail.
      # we may remove it after several releases
      - name: "data-migrator"
        image: goharbor/harbor-db:v2.10.0
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:v2.10.0
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 1
        envFrom:
          - secretRef:
              name: "harbor-database"
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-redis
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: harbor-trivy
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 81105cb33a8cb2937d69d3a39d46a94953951b6154c8518d288852bcf66b4d6d
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.10.0
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath: 
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - secretName: harbor-ingress
    hosts:
    - core.harbor.domain
  rules:
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /service/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /chartrepo/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /c/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: harbor-portal
            port:
              number: 80
    host: core.harbor.domain
